package alekseytyan.codewars;

/**
 * If you finish this kata, you can try Insane Coloured Triangles by Bubbler,
 * which is a much harder version of this one.
 *
 * A coloured triangle is created from a row of colours, each of which is red, green or blue.
 * Successive rows, each containing one fewer colour than the last, are generated by considering
 * the two touching colours in the previous row. If these colours are identical,
 * the same colour is used in the new row. If they are different, the missing
 * colour is used in the new row. This is continued until the final row,
 * with only a single colour, is generated.
 *
 * The different possibilities are:
 *
 * Colour here:        G G        B G        R G        B R
 * Becomes colour:      G          R          B          G
 * With a bigger example:
 *
 * R R G B R G B B
 *  R B R G B R B
 *   G G B R G G
 *    G R G B G
 *     B B R R
 *      B G R
 *       R B
 *        G
 * You will be given the first row of the triangle as a string and its your job to return
 * the final colour which would appear in the bottom row as a string. In the case of the example
 * above, you would the given RRGBRGBB you should return G.
 *
 * The input string will only contain the uppercase letters R, G, B and there will be
 * at least one letter so you do not have to test for invalid input.
 * If you are only given one colour as the input, return that colour.
 */
public class ColouredTriangles {
    public static char triangle(final String row) {
        // TODO
        StringBuilder sPermanent = new StringBuilder(row);
        StringBuilder s = new StringBuilder(row);
        while (sPermanent.length() > 1) {
            for (int i = 0; i < sPermanent.length() - 1; i++) {
                if(sPermanent.charAt(i) == 'R') {
                    switch (sPermanent.charAt(i+1)) {
                        case 'R': s.append('R'); break;
                        case 'G': s.append('B'); break;
                        case 'B': s.append('G'); break;
                    }
                } else if(sPermanent.charAt(i) == 'G') {
                    switch (sPermanent.charAt(i+1)) {
                        case 'R': s.append('B'); break;
                        case 'G': s.append('G'); break;
                        case 'B': s.append('R'); break;
                    }
                } else if(sPermanent.charAt(i) == 'B') {
                    switch (sPermanent.charAt(i+1)) {
                        case 'R': s.append('G'); break;
                        case 'G': s.append('R'); break;
                        case 'B': s.append('B'); break;
                    }
                }
            }
            sPermanent = new StringBuilder(s);
        }
        return sPermanent.charAt(0);
    }
}